{"env_info": "sys.platform: win32\nPython: 3.7.11 (default, Jul 27 2021, 09:42:29) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 4070\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.3\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nMSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.00.24210 for x64\nGCC: n/a\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.1\nMMCV: 1.5.0\nMMCV Compiler: MSVC 192930140\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.3+", "config": "dataset_type = 'CocoDataset'\ndata_root = 'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(480, 1333), (512, 1333), (544, 1333), (576, 1333),\n                          (608, 1333), (640, 1333), (672, 1333), (704, 1333),\n                          (736, 1333), (768, 1333), (800, 1333)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }],\n                  [{\n                      'type': 'Resize',\n                      'img_scale': [(400, 4200), (500, 4200), (600, 4200)],\n                      'multiscale_mode': 'value',\n                      'keep_ratio': True\n                  }, {\n                      'type': 'RandomCrop',\n                      'crop_type': 'absolute_range',\n                      'crop_size': (384, 600),\n                      'allow_negative_crop': True\n                  }, {\n                      'type':\n                      'Resize',\n                      'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                    (576, 1333), (608, 1333), (640, 1333),\n                                    (672, 1333), (704, 1333), (736, 1333),\n                                    (768, 1333), (800, 1333)],\n                      'multiscale_mode':\n                      'value',\n                      'override':\n                      True,\n                      'keep_ratio':\n                      True\n                  }]]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=1),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=1),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/annotations/instances_train2017.json',\n        img_prefix=\n        'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type':\n                    'Resize',\n                    'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                  (576, 1333), (608, 1333), (640, 1333),\n                                  (672, 1333), (704, 1333), (736, 1333),\n                                  (768, 1333), (800, 1333)],\n                    'multiscale_mode':\n                    'value',\n                    'keep_ratio':\n                    True\n                }],\n                          [{\n                              'type': 'Resize',\n                              'img_scale': [(400, 4200), (500, 4200),\n                                            (600, 4200)],\n                              'multiscale_mode': 'value',\n                              'keep_ratio': True\n                          }, {\n                              'type': 'RandomCrop',\n                              'crop_type': 'absolute_range',\n                              'crop_size': (384, 600),\n                              'allow_negative_crop': True\n                          }, {\n                              'type':\n                              'Resize',\n                              'img_scale': [(480, 1333), (512, 1333),\n                                            (544, 1333), (576, 1333),\n                                            (608, 1333), (640, 1333),\n                                            (672, 1333), (704, 1333),\n                                            (736, 1333), (768, 1333),\n                                            (800, 1333)],\n                              'multiscale_mode':\n                              'value',\n                              'override':\n                              True,\n                              'keep_ratio':\n                              True\n                          }]]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=1),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        filter_empty_gt=False),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/annotations/instances_val2017.json',\n        img_prefix=\n        'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=1),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/annotations/instances_val2017.json',\n        img_prefix=\n        'C:/Users/Administrator/Desktop/read-Co-DETR-main/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=1),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nnum_dec_layer = 6\nlambda_2 = 2.0\nmodel = dict(\n    type='CoDETR',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='ChannelMapper',\n        in_channels=[512, 1024, 2048],\n        kernel_size=1,\n        out_channels=256,\n        act_cfg=None,\n        norm_cfg=dict(type='GN', num_groups=32),\n        num_outs=4),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=12.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=12.0)),\n    query_head=dict(\n        type='CoDeformDETRHead',\n        num_query=300,\n        num_classes=80,\n        in_channels=2048,\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=True,\n        mixed_selection=True,\n        transformer=dict(\n            type='CoDeformableDetrTransformer',\n            num_co_heads=2,\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        dropout=0.0),\n                    feedforward_channels=2048,\n                    ffn_dropout=0.0,\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),\n            decoder=dict(\n                type='CoDeformableDetrTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                look_forward_twice=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.0),\n                        dict(\n                            type='MultiScaleDeformableAttention',\n                            embed_dims=256,\n                            dropout=0.0)\n                    ],\n                    feedforward_channels=2048,\n                    ffn_dropout=0.0,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=5.0),\n        loss_iou=dict(type='GIoULoss', loss_weight=2.0)),\n    roi_head=[\n        dict(\n            type='CoStandardRoIHead',\n            bbox_roi_extractor=dict(\n                type='SingleRoIExtractor',\n                roi_layer=dict(\n                    type='RoIAlign', output_size=7, sampling_ratio=0),\n                out_channels=256,\n                featmap_strides=[8, 16, 32, 64],\n                finest_scale=112),\n            bbox_head=dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=80,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=False,\n                reg_decoded_bbox=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=12.0),\n                loss_bbox=dict(type='GIoULoss', loss_weight=120.0)),\n            mask_roi_extractor=dict(\n                type='SingleRoIExtractor',\n                roi_layer=dict(\n                    type='RoIAlign', output_size=14, sampling_ratio=0),\n                out_channels=256,\n                featmap_strides=[8, 16, 32, 64],\n                finest_scale=112),\n            mask_head=dict(\n                type='FCNMaskHead',\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=80,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=12.0)))\n    ],\n    bbox_head=[\n        dict(\n            type='CoATSSHead',\n            num_classes=80,\n            in_channels=256,\n            stacked_convs=1,\n            feat_channels=256,\n            anchor_generator=dict(\n                type='AnchorGenerator',\n                ratios=[1.0],\n                octave_base_scale=8,\n                scales_per_octave=1,\n                strides=[8, 16, 32, 64, 128]),\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            loss_cls=dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                gamma=2.0,\n                alpha=0.25,\n                loss_weight=12.0),\n            loss_bbox=dict(type='GIoULoss', loss_weight=24.0),\n            loss_centerness=dict(\n                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=12.0))\n    ],\n    train_cfg=[\n        dict(\n            assigner=dict(\n                type='HungarianAssigner',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(\n                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),\n                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0))),\n        dict(\n            rpn=dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.3,\n                    min_pos_iou=0.3,\n                    match_low_quality=True,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=256,\n                    pos_fraction=0.5,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=False),\n                allowed_border=-1,\n                pos_weight=-1,\n                debug=False),\n            rpn_proposal=dict(\n                nms_pre=4000,\n                max_per_img=1000,\n                nms=dict(type='nms', iou_threshold=0.7),\n                min_bbox_size=0),\n            rcnn=dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)),\n        dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False)\n    ],\n    test_cfg=[\n        dict(max_per_img=100),\n        dict(\n            rpn=dict(\n                nms_pre=1000,\n                max_per_img=1000,\n                nms=dict(type='nms', iou_threshold=0.7),\n                min_bbox_size=0),\n            rcnn=dict(\n                score_thr=0.0,\n                nms=dict(type='nms', iou_threshold=0.5),\n                mask_thr_binary=0.5,\n                max_per_img=100)),\n        dict(\n            nms_pre=1000,\n            min_bbox_size=0,\n            score_thr=0.0,\n            nms=dict(type='nms', iou_threshold=0.6),\n            max_per_img=100)\n    ])\noptimizer = dict(\n    type='AdamW',\n    lr=0.0002,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            backbone=dict(lr_mult=0.1),\n            sampling_offsets=dict(lr_mult=0.1),\n            reference_points=dict(lr_mult=0.1))))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(policy='step', step=[11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nwork_dir = 'workdir'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 510050398, "exp_name": "co_deformable_detr_mask_r50_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0002, "memory": 9044, "data_time": 0.37243, "enc_loss_cls": 2.0757, "enc_loss_bbox": 1.46867, "enc_loss_iou": 1.16237, "loss_cls": 3.36685, "loss_bbox": 3.42403, "loss_iou": 2.47545, "d0.loss_cls": 1.93886, "d0.loss_bbox": 3.48162, "d0.loss_iou": 2.49606, "d1.loss_cls": 2.12713, "d1.loss_bbox": 3.44692, "d1.loss_iou": 2.47969, "d2.loss_cls": 2.65578, "d2.loss_bbox": 3.43058, "d2.loss_iou": 2.47788, "d3.loss_cls": 3.62073, "d3.loss_bbox": 3.4258, "d3.loss_iou": 2.47709, "d4.loss_cls": 3.32067, "d4.loss_bbox": 3.42468, "d4.loss_iou": 2.47641, "loss_rpn_cls": 3.152, "loss_rpn_bbox": 0.36952, "loss_cls0": 4.65374, "acc0": 94.76172, "loss_bbox0": 1.26294, "loss_mask0": 8.51361, "loss_cls1": 14.58635, "loss_bbox1": 13.79055, "loss_centerness1": 7.83492, "loss_cls_aux0": 1.77584, "loss_bbox_aux0": 1.16074, "loss_iou_aux0": 0.58788, "d0.loss_cls_aux0": 1.65852, "d0.loss_bbox_aux0": 1.15067, "d0.loss_iou_aux0": 0.55247, "d1.loss_cls_aux0": 1.65863, "d1.loss_bbox_aux0": 1.15304, "d1.loss_iou_aux0": 0.56127, "d2.loss_cls_aux0": 1.71143, "d2.loss_bbox_aux0": 1.15501, "d2.loss_iou_aux0": 0.56832, "d3.loss_cls_aux0": 1.76943, "d3.loss_bbox_aux0": 1.157, "d3.loss_iou_aux0": 0.57514, "d4.loss_cls_aux0": 1.77371, "d4.loss_bbox_aux0": 1.15871, "d4.loss_iou_aux0": 0.58098, "loss_cls_aux1": 1.78272, "loss_bbox_aux1": 1.38637, "loss_iou_aux1": 1.15835, "d0.loss_cls_aux1": 1.65288, "d0.loss_bbox_aux1": 1.38503, "d0.loss_iou_aux1": 1.15819, "d1.loss_cls_aux1": 1.67705, "d1.loss_bbox_aux1": 1.38527, "d1.loss_iou_aux1": 1.15799, "d2.loss_cls_aux1": 1.70806, "d2.loss_bbox_aux1": 1.38554, "d2.loss_iou_aux1": 1.15804, "d3.loss_cls_aux1": 1.77316, "d3.loss_bbox_aux1": 1.38574, "d3.loss_iou_aux1": 1.15804, "d4.loss_cls_aux1": 1.78774, "d4.loss_bbox_aux1": 1.38597, "d4.loss_iou_aux1": 1.15815, "loss": 157.76969, "grad_norm": 252.46108, "time": 1.02368}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0002, "memory": 9044, "data_time": 0.00782, "enc_loss_cls": 1.76709, "enc_loss_bbox": 1.15621, "enc_loss_iou": 1.15129, "loss_cls": 2.03057, "loss_bbox": 2.37761, "loss_iou": 1.95718, "d0.loss_cls": 1.83489, "d0.loss_bbox": 2.40483, "d0.loss_iou": 1.98296, "d1.loss_cls": 1.94053, "d1.loss_bbox": 2.37892, "d1.loss_iou": 1.9625, "d2.loss_cls": 1.9468, "d2.loss_bbox": 2.37651, "d2.loss_iou": 1.95872, "d3.loss_cls": 1.95045, "d3.loss_bbox": 2.37703, "d3.loss_iou": 1.95781, "d4.loss_cls": 1.99719, "d4.loss_bbox": 2.37737, "d4.loss_iou": 1.95728, "loss_rpn_cls": 2.42886, "loss_rpn_bbox": 0.48277, "loss_cls0": 3.83205, "acc0": 95.9375, "loss_bbox0": 1.6408, "loss_mask0": 8.19495, "loss_cls1": 13.05232, "loss_bbox1": 13.62313, "loss_centerness1": 7.80399, "loss_cls_aux0": 1.52996, "loss_bbox_aux0": 1.16485, "loss_iou_aux0": 0.61098, "d0.loss_cls_aux0": 1.30757, "d0.loss_bbox_aux0": 1.16069, "d0.loss_iou_aux0": 0.58313, "d1.loss_cls_aux0": 1.33615, "d1.loss_bbox_aux0": 1.16151, "d1.loss_iou_aux0": 0.5896, "d2.loss_cls_aux0": 1.38557, "d2.loss_bbox_aux0": 1.16239, "d2.loss_iou_aux0": 0.59506, "d3.loss_cls_aux0": 1.46048, "d3.loss_bbox_aux0": 1.16306, "d3.loss_iou_aux0": 0.59976, "d4.loss_cls_aux0": 1.52421, "d4.loss_bbox_aux0": 1.16406, "d4.loss_iou_aux0": 0.60601, "loss_cls_aux1": 1.56951, "loss_bbox_aux1": 1.27662, "loss_iou_aux1": 1.17452, "d0.loss_cls_aux1": 1.34378, "d0.loss_bbox_aux1": 1.27641, "d0.loss_iou_aux1": 1.1744, "d1.loss_cls_aux1": 1.38902, "d1.loss_bbox_aux1": 1.27645, "d1.loss_iou_aux1": 1.17444, "d2.loss_cls_aux1": 1.44251, "d2.loss_bbox_aux1": 1.27648, "d2.loss_iou_aux1": 1.17447, "d3.loss_cls_aux1": 1.51468, "d3.loss_bbox_aux1": 1.27653, "d3.loss_iou_aux1": 1.17445, "d4.loss_cls_aux1": 1.56137, "d4.loss_bbox_aux1": 1.2766, "d4.loss_iou_aux1": 1.17452, "loss": 135.53438, "grad_norm": 124.86382, "time": 0.58537}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0002, "memory": 13063, "data_time": 0.00816, "enc_loss_cls": 1.75807, "enc_loss_bbox": 1.07796, "enc_loss_iou": 1.1524, "loss_cls": 1.99234, "loss_bbox": 2.29009, "loss_iou": 1.90523, "d0.loss_cls": 1.88013, "d0.loss_bbox": 2.30732, "d0.loss_iou": 1.89078, "d1.loss_cls": 1.91791, "d1.loss_bbox": 2.27632, "d1.loss_iou": 1.88919, "d2.loss_cls": 1.91371, "d2.loss_bbox": 2.28813, "d2.loss_iou": 1.90591, "d3.loss_cls": 1.94316, "d3.loss_bbox": 2.28796, "d3.loss_iou": 1.90653, "d4.loss_cls": 1.98344, "d4.loss_bbox": 2.28872, "d4.loss_iou": 1.90606, "loss_rpn_cls": 2.41548, "loss_rpn_bbox": 0.43802, "loss_cls0": 3.43501, "acc0": 96.30273, "loss_bbox0": 1.42688, "loss_mask0": 8.16304, "loss_cls1": 12.87236, "loss_bbox1": 13.68945, "loss_centerness1": 7.83541, "loss_cls_aux0": 1.49298, "loss_bbox_aux0": 1.10215, "loss_iou_aux0": 0.58219, "d0.loss_cls_aux0": 1.29048, "d0.loss_bbox_aux0": 1.09904, "d0.loss_iou_aux0": 0.56302, "d1.loss_cls_aux0": 1.32605, "d1.loss_bbox_aux0": 1.09965, "d1.loss_iou_aux0": 0.56922, "d2.loss_cls_aux0": 1.35524, "d2.loss_bbox_aux0": 1.10035, "d2.loss_iou_aux0": 0.57361, "d3.loss_cls_aux0": 1.40003, "d3.loss_bbox_aux0": 1.10111, "d3.loss_iou_aux0": 0.57704, "d4.loss_cls_aux0": 1.46552, "d4.loss_bbox_aux0": 1.10161, "d4.loss_iou_aux0": 0.57943, "loss_cls_aux1": 1.56498, "loss_bbox_aux1": 1.16678, "loss_iou_aux1": 1.18585, "d0.loss_cls_aux1": 1.34101, "d0.loss_bbox_aux1": 1.16706, "d0.loss_iou_aux1": 1.18508, "d1.loss_cls_aux1": 1.38246, "d1.loss_bbox_aux1": 1.16699, "d1.loss_iou_aux1": 1.18518, "d2.loss_cls_aux1": 1.41728, "d2.loss_bbox_aux1": 1.16701, "d2.loss_iou_aux1": 1.18534, "d3.loss_cls_aux1": 1.46993, "d3.loss_bbox_aux1": 1.16703, "d3.loss_iou_aux1": 1.18561, "d4.loss_cls_aux1": 1.51993, "d4.loss_bbox_aux1": 1.1669, "d4.loss_iou_aux1": 1.18564, "loss": 132.22577, "grad_norm": 114.06991, "time": 0.92281}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0002, "memory": 13063, "data_time": 0.00755, "enc_loss_cls": 1.70895, "enc_loss_bbox": 1.2024, "enc_loss_iou": 1.06819, "loss_cls": 1.94671, "loss_bbox": 2.08652, "loss_iou": 1.47733, "d0.loss_cls": 1.83773, "d0.loss_bbox": 2.08838, "d0.loss_iou": 1.48688, "d1.loss_cls": 1.84261, "d1.loss_bbox": 2.0821, "d1.loss_iou": 1.48053, "d2.loss_cls": 1.83248, "d2.loss_bbox": 2.08426, "d2.loss_iou": 1.47845, "d3.loss_cls": 1.83411, "d3.loss_bbox": 2.08618, "d3.loss_iou": 1.47819, "d4.loss_cls": 1.87931, "d4.loss_bbox": 2.0873, "d4.loss_iou": 1.47634, "loss_rpn_cls": 1.98419, "loss_rpn_bbox": 0.34794, "loss_cls0": 4.90458, "acc0": 94.28711, "loss_bbox0": 2.4804, "loss_mask0": 7.94332, "loss_cls1": 12.11592, "loss_bbox1": 12.74486, "loss_centerness1": 7.69394, "loss_cls_aux0": 1.31106, "loss_bbox_aux0": 1.28102, "loss_iou_aux0": 0.68316, "d0.loss_cls_aux0": 1.10569, "d0.loss_bbox_aux0": 1.28001, "d0.loss_iou_aux0": 0.67136, "d1.loss_cls_aux0": 1.12601, "d1.loss_bbox_aux0": 1.28031, "d1.loss_iou_aux0": 0.67366, "d2.loss_cls_aux0": 1.15795, "d2.loss_bbox_aux0": 1.28035, "d2.loss_iou_aux0": 0.67616, "d3.loss_cls_aux0": 1.21607, "d3.loss_bbox_aux0": 1.2805, "d3.loss_iou_aux0": 0.67977, "d4.loss_cls_aux0": 1.27887, "d4.loss_bbox_aux0": 1.28066, "d4.loss_iou_aux0": 0.6817, "loss_cls_aux1": 1.39588, "loss_bbox_aux1": 1.30851, "loss_iou_aux1": 1.10919, "d0.loss_cls_aux1": 1.1804, "d0.loss_bbox_aux1": 1.30868, "d0.loss_iou_aux1": 1.11011, "d1.loss_cls_aux1": 1.20244, "d1.loss_bbox_aux1": 1.30858, "d1.loss_iou_aux1": 1.10986, "d2.loss_cls_aux1": 1.23102, "d2.loss_bbox_aux1": 1.3086, "d2.loss_iou_aux1": 1.10968, "d3.loss_cls_aux1": 1.2971, "d3.loss_bbox_aux1": 1.3085, "d3.loss_iou_aux1": 1.10935, "d4.loss_cls_aux1": 1.34882, "d4.loss_bbox_aux1": 1.30842, "d4.loss_iou_aux1": 1.1092, "loss": 127.86874, "grad_norm": 104.97623, "time": 0.63983}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0002, "memory": 13063, "data_time": 0.00823, "enc_loss_cls": 1.68887, "enc_loss_bbox": 1.04826, "enc_loss_iou": 1.10572, "loss_cls": 1.89161, "loss_bbox": 2.04258, "loss_iou": 1.61109, "d0.loss_cls": 1.91428, "d0.loss_bbox": 2.09253, "d0.loss_iou": 1.57079, "d1.loss_cls": 1.82819, "d1.loss_bbox": 2.05049, "d1.loss_iou": 1.60243, "d2.loss_cls": 1.80888, "d2.loss_bbox": 2.04442, "d2.loss_iou": 1.61216, "d3.loss_cls": 1.81525, "d3.loss_bbox": 2.04463, "d3.loss_iou": 1.61115, "d4.loss_cls": 1.84676, "d4.loss_bbox": 2.04382, "d4.loss_iou": 1.61148, "loss_rpn_cls": 2.2631, "loss_rpn_bbox": 0.38739, "loss_cls0": 5.64195, "acc0": 93.35156, "loss_bbox0": 2.87741, "loss_mask0": 7.92271, "loss_cls1": 12.02329, "loss_bbox1": 12.98146, "loss_centerness1": 7.76998, "loss_cls_aux0": 1.2623, "loss_bbox_aux0": 1.20088, "loss_iou_aux0": 0.69831, "d0.loss_cls_aux0": 1.07475, "d0.loss_bbox_aux0": 1.19824, "d0.loss_iou_aux0": 0.67703, "d1.loss_cls_aux0": 1.07821, "d1.loss_bbox_aux0": 1.1987, "d1.loss_iou_aux0": 0.68723, "d2.loss_cls_aux0": 1.08917, "d2.loss_bbox_aux0": 1.19915, "d2.loss_iou_aux0": 0.69022, "d3.loss_cls_aux0": 1.13708, "d3.loss_bbox_aux0": 1.19961, "d3.loss_iou_aux0": 0.69248, "d4.loss_cls_aux0": 1.20604, "d4.loss_bbox_aux0": 1.20005, "d4.loss_iou_aux0": 0.69472, "loss_cls_aux1": 1.37326, "loss_bbox_aux1": 1.16147, "loss_iou_aux1": 1.13086, "d0.loss_cls_aux1": 1.16133, "d0.loss_bbox_aux1": 1.16215, "d0.loss_iou_aux1": 1.13096, "d1.loss_cls_aux1": 1.1658, "d1.loss_bbox_aux1": 1.16215, "d1.loss_iou_aux1": 1.13091, "d2.loss_cls_aux1": 1.1841, "d2.loss_bbox_aux1": 1.16199, "d2.loss_iou_aux1": 1.13087, "d3.loss_cls_aux1": 1.24162, "d3.loss_bbox_aux1": 1.16208, "d3.loss_iou_aux1": 1.13094, "d4.loss_cls_aux1": 1.32087, "d4.loss_bbox_aux1": 1.1619, "d4.loss_iou_aux1": 1.13084, "loss": 128.14096, "grad_norm": 107.51229, "time": 0.5853}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0002, "memory": 13063, "data_time": 0.00865, "enc_loss_cls": 1.69136, "enc_loss_bbox": 0.93151, "enc_loss_iou": 1.0725, "loss_cls": 1.85751, "loss_bbox": 1.53516, "loss_iou": 1.55055, "d0.loss_cls": 1.76715, "d0.loss_bbox": 1.53692, "d0.loss_iou": 1.51222, "d1.loss_cls": 1.76254, "d1.loss_bbox": 1.5297, "d1.loss_iou": 1.53226, "d2.loss_cls": 1.80811, "d2.loss_bbox": 1.5302, "d2.loss_iou": 1.54943, "d3.loss_cls": 1.82066, "d3.loss_bbox": 1.5302, "d3.loss_iou": 1.55291, "d4.loss_cls": 1.8359, "d4.loss_bbox": 1.53048, "d4.loss_iou": 1.55447, "loss_rpn_cls": 2.30541, "loss_rpn_bbox": 0.44204, "loss_cls0": 5.5177, "acc0": 93.46484, "loss_bbox0": 2.79771, "loss_mask0": 7.63971, "loss_cls1": 11.64747, "loss_bbox1": 13.02487, "loss_centerness1": 7.79313, "loss_cls_aux0": 1.14398, "loss_bbox_aux0": 1.20634, "loss_iou_aux0": 0.69185, "d0.loss_cls_aux0": 1.00098, "d0.loss_bbox_aux0": 1.20556, "d0.loss_iou_aux0": 0.68431, "d1.loss_cls_aux0": 1.01141, "d1.loss_bbox_aux0": 1.20576, "d1.loss_iou_aux0": 0.68593, "d2.loss_cls_aux0": 1.02653, "d2.loss_bbox_aux0": 1.20594, "d2.loss_iou_aux0": 0.68726, "d3.loss_cls_aux0": 1.04516, "d3.loss_bbox_aux0": 1.2063, "d3.loss_iou_aux0": 0.68835, "d4.loss_cls_aux0": 1.09059, "d4.loss_bbox_aux0": 1.20641, "d4.loss_iou_aux0": 0.69061, "loss_cls_aux1": 1.19743, "loss_bbox_aux1": 1.10555, "loss_iou_aux1": 1.14012, "d0.loss_cls_aux1": 1.03441, "d0.loss_bbox_aux1": 1.10605, "d0.loss_iou_aux1": 1.14023, "d1.loss_cls_aux1": 1.04616, "d1.loss_bbox_aux1": 1.10591, "d1.loss_iou_aux1": 1.14024, "d2.loss_cls_aux1": 1.06347, "d2.loss_bbox_aux1": 1.10587, "d2.loss_iou_aux1": 1.14023, "d3.loss_cls_aux1": 1.09447, "d3.loss_bbox_aux1": 1.10576, "d3.loss_iou_aux1": 1.14032, "d4.loss_cls_aux1": 1.14651, "d4.loss_bbox_aux1": 1.10565, "d4.loss_iou_aux1": 1.14019, "loss": 121.90163, "grad_norm": 115.22448, "time": 0.6429}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0002, "memory": 13063, "data_time": 0.00718, "enc_loss_cls": 1.53726, "enc_loss_bbox": 1.15294, "enc_loss_iou": 1.1284, "loss_cls": 1.83701, "loss_bbox": 1.57174, "loss_iou": 1.47834, "d0.loss_cls": 1.83248, "d0.loss_bbox": 1.6308, "d0.loss_iou": 1.47487, "d1.loss_cls": 1.83143, "d1.loss_bbox": 1.57474, "d1.loss_iou": 1.47823, "d2.loss_cls": 1.80719, "d2.loss_bbox": 1.56767, "d2.loss_iou": 1.48112, "d3.loss_cls": 1.80322, "d3.loss_bbox": 1.56532, "d3.loss_iou": 1.48408, "d4.loss_cls": 1.80276, "d4.loss_bbox": 1.56918, "d4.loss_iou": 1.48001, "loss_rpn_cls": 2.07313, "loss_rpn_bbox": 0.45761, "loss_cls0": 5.49325, "acc0": 93.56055, "loss_bbox0": 2.82092, "loss_mask0": 7.89937, "loss_cls1": 11.43254, "loss_bbox1": 13.64684, "loss_centerness1": 7.84672, "loss_cls_aux0": 1.08177, "loss_bbox_aux0": 1.32309, "loss_iou_aux0": 0.69077, "d0.loss_cls_aux0": 0.98093, "d0.loss_bbox_aux0": 1.32395, "d0.loss_iou_aux0": 0.68257, "d1.loss_cls_aux0": 0.98186, "d1.loss_bbox_aux0": 1.32393, "d1.loss_iou_aux0": 0.68347, "d2.loss_cls_aux0": 0.98935, "d2.loss_bbox_aux0": 1.32402, "d2.loss_iou_aux0": 0.68467, "d3.loss_cls_aux0": 0.99739, "d3.loss_bbox_aux0": 1.32392, "d3.loss_iou_aux0": 0.68572, "d4.loss_cls_aux0": 1.03599, "d4.loss_bbox_aux0": 1.32372, "d4.loss_iou_aux0": 0.68776, "loss_cls_aux1": 1.10151, "loss_bbox_aux1": 1.32727, "loss_iou_aux1": 1.21582, "d0.loss_cls_aux1": 0.99755, "d0.loss_bbox_aux1": 1.3264, "d0.loss_iou_aux1": 1.21546, "d1.loss_cls_aux1": 0.9951, "d1.loss_bbox_aux1": 1.32644, "d1.loss_iou_aux1": 1.21541, "d2.loss_cls_aux1": 1.0007, "d2.loss_bbox_aux1": 1.32658, "d2.loss_iou_aux1": 1.21546, "d3.loss_cls_aux1": 1.01732, "d3.loss_bbox_aux1": 1.32662, "d3.loss_iou_aux1": 1.2155, "d4.loss_cls_aux1": 1.05184, "d4.loss_bbox_aux1": 1.32685, "d4.loss_iou_aux1": 1.21569, "loss": 124.30158, "grad_norm": 111.86122, "time": 0.54768}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0002, "memory": 13063, "data_time": 0.00784, "enc_loss_cls": 1.55985, "enc_loss_bbox": 0.8541, "enc_loss_iou": 1.11087, "loss_cls": 1.75374, "loss_bbox": 1.42994, "loss_iou": 1.62464, "d0.loss_cls": 1.7919, "d0.loss_bbox": 1.4121, "d0.loss_iou": 1.58308, "d1.loss_cls": 1.76209, "d1.loss_bbox": 1.42952, "d1.loss_iou": 1.61801, "d2.loss_cls": 1.74513, "d2.loss_bbox": 1.42557, "d2.loss_iou": 1.62915, "d3.loss_cls": 1.74286, "d3.loss_bbox": 1.42925, "d3.loss_iou": 1.62526, "d4.loss_cls": 1.74419, "d4.loss_bbox": 1.43039, "d4.loss_iou": 1.62405, "loss_rpn_cls": 2.30611, "loss_rpn_bbox": 0.52278, "loss_cls0": 5.75445, "acc0": 93.25781, "loss_bbox0": 2.92882, "loss_mask0": 7.75909, "loss_cls1": 11.35018, "loss_bbox1": 13.79316, "loss_centerness1": 7.85584, "loss_cls_aux0": 1.03758, "loss_bbox_aux0": 1.15189, "loss_iou_aux0": 0.67154, "d0.loss_cls_aux0": 0.97532, "d0.loss_bbox_aux0": 1.15073, "d0.loss_iou_aux0": 0.66071, "d1.loss_cls_aux0": 0.97738, "d1.loss_bbox_aux0": 1.15085, "d1.loss_iou_aux0": 0.66148, "d2.loss_cls_aux0": 0.98419, "d2.loss_bbox_aux0": 1.15093, "d2.loss_iou_aux0": 0.66274, "d3.loss_cls_aux0": 0.9881, "d3.loss_bbox_aux0": 1.15103, "d3.loss_iou_aux0": 0.66398, "d4.loss_cls_aux0": 1.0137, "d4.loss_bbox_aux0": 1.15156, "d4.loss_iou_aux0": 0.66783, "loss_cls_aux1": 1.09547, "loss_bbox_aux1": 1.1836, "loss_iou_aux1": 1.23477, "d0.loss_cls_aux1": 1.01391, "d0.loss_bbox_aux1": 1.18392, "d0.loss_iou_aux1": 1.23527, "d1.loss_cls_aux1": 1.02159, "d1.loss_bbox_aux1": 1.18388, "d1.loss_iou_aux1": 1.23527, "d2.loss_cls_aux1": 1.02908, "d2.loss_bbox_aux1": 1.18385, "d2.loss_iou_aux1": 1.23521, "d3.loss_cls_aux1": 1.03767, "d3.loss_bbox_aux1": 1.18369, "d3.loss_iou_aux1": 1.23507, "d4.loss_cls_aux1": 1.06192, "d4.loss_bbox_aux1": 1.18347, "d4.loss_iou_aux1": 1.23483, "loss": 122.24012, "grad_norm": 97.70694, "time": 0.5499}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0002, "memory": 13063, "data_time": 0.007, "enc_loss_cls": 1.52847, "enc_loss_bbox": 0.98833, "enc_loss_iou": 0.99694, "loss_cls": 1.83958, "loss_bbox": 1.46307, "loss_iou": 1.48925, "d0.loss_cls": 1.82205, "d0.loss_bbox": 1.4648, "d0.loss_iou": 1.47596, "d1.loss_cls": 1.80588, "d1.loss_bbox": 1.45902, "d1.loss_iou": 1.49198, "d2.loss_cls": 1.81441, "d2.loss_bbox": 1.4587, "d2.loss_iou": 1.49295, "d3.loss_cls": 1.82627, "d3.loss_bbox": 1.46012, "d3.loss_iou": 1.49013, "d4.loss_cls": 1.82844, "d4.loss_bbox": 1.46125, "d4.loss_iou": 1.49195, "loss_rpn_cls": 1.7697, "loss_rpn_bbox": 0.35178, "loss_cls0": 5.3735, "acc0": 93.60547, "loss_bbox0": 2.84941, "loss_mask0": 7.64412, "loss_cls1": 11.42237, "loss_bbox1": 12.76147, "loss_centerness1": 7.7632, "loss_cls_aux0": 0.99484, "loss_bbox_aux0": 1.312, "loss_iou_aux0": 0.71534, "d0.loss_cls_aux0": 0.96469, "d0.loss_bbox_aux0": 1.31237, "d0.loss_iou_aux0": 0.71227, "d1.loss_cls_aux0": 0.96579, "d1.loss_bbox_aux0": 1.31243, "d1.loss_iou_aux0": 0.71272, "d2.loss_cls_aux0": 0.97226, "d2.loss_bbox_aux0": 1.31241, "d2.loss_iou_aux0": 0.71333, "d3.loss_cls_aux0": 0.97383, "d3.loss_bbox_aux0": 1.31236, "d3.loss_iou_aux0": 0.71361, "d4.loss_cls_aux0": 0.97931, "d4.loss_bbox_aux0": 1.31234, "d4.loss_iou_aux0": 0.71419, "loss_cls_aux1": 1.0558, "loss_bbox_aux1": 1.32271, "loss_iou_aux1": 1.16599, "d0.loss_cls_aux1": 1.02756, "d0.loss_bbox_aux1": 1.32269, "d0.loss_iou_aux1": 1.16633, "d1.loss_cls_aux1": 1.0136, "d1.loss_bbox_aux1": 1.32275, "d1.loss_iou_aux1": 1.16629, "d2.loss_cls_aux1": 1.01567, "d2.loss_bbox_aux1": 1.32275, "d2.loss_iou_aux1": 1.1662, "d3.loss_cls_aux1": 1.01758, "d3.loss_bbox_aux1": 1.32278, "d3.loss_iou_aux1": 1.16622, "d4.loss_cls_aux1": 1.02671, "d4.loss_bbox_aux1": 1.32281, "d4.loss_iou_aux1": 1.16614, "loss": 121.18173, "grad_norm": 99.05947, "time": 0.56342}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0002, "memory": 13063, "data_time": 0.0084, "enc_loss_cls": 1.5404, "enc_loss_bbox": 0.71473, "enc_loss_iou": 1.0189, "loss_cls": 1.72141, "loss_bbox": 1.41184, "loss_iou": 1.61568, "d0.loss_cls": 1.74139, "d0.loss_bbox": 1.4131, "d0.loss_iou": 1.61417, "d1.loss_cls": 1.71012, "d1.loss_bbox": 1.40406, "d1.loss_iou": 1.61706, "d2.loss_cls": 1.70031, "d2.loss_bbox": 1.40544, "d2.loss_iou": 1.61776, "d3.loss_cls": 1.7038, "d3.loss_bbox": 1.40734, "d3.loss_iou": 1.61936, "d4.loss_cls": 1.69978, "d4.loss_bbox": 1.40876, "d4.loss_iou": 1.61859, "loss_rpn_cls": 1.84363, "loss_rpn_bbox": 0.39365, "loss_cls0": 5.72881, "acc0": 92.66992, "loss_bbox0": 3.21008, "loss_mask0": 7.50156, "loss_cls1": 10.75111, "loss_bbox1": 13.00966, "loss_centerness1": 7.82739, "loss_cls_aux0": 0.93071, "loss_bbox_aux0": 1.23766, "loss_iou_aux0": 0.70925, "d0.loss_cls_aux0": 0.92101, "d0.loss_bbox_aux0": 1.23862, "d0.loss_iou_aux0": 0.70563, "d1.loss_cls_aux0": 0.92195, "d1.loss_bbox_aux0": 1.23868, "d1.loss_iou_aux0": 0.70613, "d2.loss_cls_aux0": 0.92034, "d2.loss_bbox_aux0": 1.23861, "d2.loss_iou_aux0": 0.70678, "d3.loss_cls_aux0": 0.91967, "d3.loss_bbox_aux0": 1.23838, "d3.loss_iou_aux0": 0.70723, "d4.loss_cls_aux0": 0.9222, "d4.loss_bbox_aux0": 1.2383, "d4.loss_iou_aux0": 0.70783, "loss_cls_aux1": 0.98516, "loss_bbox_aux1": 1.205, "loss_iou_aux1": 1.19658, "d0.loss_cls_aux1": 0.96392, "d0.loss_bbox_aux1": 1.20502, "d0.loss_iou_aux1": 1.1967, "d1.loss_cls_aux1": 0.96651, "d1.loss_bbox_aux1": 1.20499, "d1.loss_iou_aux1": 1.19663, "d2.loss_cls_aux1": 0.96624, "d2.loss_bbox_aux1": 1.20502, "d2.loss_iou_aux1": 1.1966, "d3.loss_cls_aux1": 0.96853, "d3.loss_bbox_aux1": 1.20505, "d3.loss_iou_aux1": 1.19661, "d4.loss_cls_aux1": 0.97163, "d4.loss_bbox_aux1": 1.20506, "d4.loss_iou_aux1": 1.19666, "loss": 119.41077, "grad_norm": 90.15051, "time": 0.62331}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0002, "memory": 13063, "data_time": 0.00751, "enc_loss_cls": 1.488, "enc_loss_bbox": 0.75007, "enc_loss_iou": 1.04581, "loss_cls": 1.7413, "loss_bbox": 1.36615, "loss_iou": 1.54448, "d0.loss_cls": 1.72935, "d0.loss_bbox": 1.39693, "d0.loss_iou": 1.54768, "d1.loss_cls": 1.7355, "d1.loss_bbox": 1.38504, "d1.loss_iou": 1.54235, "d2.loss_cls": 1.73883, "d2.loss_bbox": 1.38788, "d2.loss_iou": 1.53725, "d3.loss_cls": 1.73985, "d3.loss_bbox": 1.37243, "d3.loss_iou": 1.54293, "d4.loss_cls": 1.7393, "d4.loss_bbox": 1.37205, "d4.loss_iou": 1.54278, "loss_rpn_cls": 1.86931, "loss_rpn_bbox": 0.40616, "loss_cls0": 5.05557, "acc0": 93.82031, "loss_bbox0": 2.67252, "loss_mask0": 7.50725, "loss_cls1": 10.95158, "loss_bbox1": 12.64728, "loss_centerness1": 7.75374, "loss_cls_aux0": 0.92252, "loss_bbox_aux0": 1.16139, "loss_iou_aux0": 0.68727, "d0.loss_cls_aux0": 0.91392, "d0.loss_bbox_aux0": 1.16224, "d0.loss_iou_aux0": 0.68328, "d1.loss_cls_aux0": 0.92142, "d1.loss_bbox_aux0": 1.16221, "d1.loss_iou_aux0": 0.68404, "d2.loss_cls_aux0": 0.9226, "d2.loss_bbox_aux0": 1.16226, "d2.loss_iou_aux0": 0.68426, "d3.loss_cls_aux0": 0.92254, "d3.loss_bbox_aux0": 1.16234, "d3.loss_iou_aux0": 0.68476, "d4.loss_cls_aux0": 0.92443, "d4.loss_bbox_aux0": 1.16227, "d4.loss_iou_aux0": 0.6857, "loss_cls_aux1": 0.97939, "loss_bbox_aux1": 1.17812, "loss_iou_aux1": 1.17746, "d0.loss_cls_aux1": 0.96741, "d0.loss_bbox_aux1": 1.17871, "d0.loss_iou_aux1": 1.1779, "d1.loss_cls_aux1": 0.97203, "d1.loss_bbox_aux1": 1.17872, "d1.loss_iou_aux1": 1.17797, "d2.loss_cls_aux1": 0.97227, "d2.loss_bbox_aux1": 1.17879, "d2.loss_iou_aux1": 1.17809, "d3.loss_cls_aux1": 0.97326, "d3.loss_bbox_aux1": 1.17878, "d3.loss_iou_aux1": 1.17816, "d4.loss_cls_aux1": 0.97767, "d4.loss_bbox_aux1": 1.17865, "d4.loss_iou_aux1": 1.17798, "loss": 116.70018, "grad_norm": 90.92275, "time": 0.60736}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0002, "memory": 13063, "data_time": 0.00815, "enc_loss_cls": 1.55831, "enc_loss_bbox": 0.64717, "enc_loss_iou": 0.95151, "loss_cls": 1.76884, "loss_bbox": 1.17387, "loss_iou": 1.49351, "d0.loss_cls": 1.77696, "d0.loss_bbox": 1.24364, "d0.loss_iou": 1.46498, "d1.loss_cls": 1.7585, "d1.loss_bbox": 1.2133, "d1.loss_iou": 1.46532, "d2.loss_cls": 1.75516, "d2.loss_bbox": 1.20309, "d2.loss_iou": 1.46881, "d3.loss_cls": 1.76199, "d3.loss_bbox": 1.17293, "d3.loss_iou": 1.4916, "d4.loss_cls": 1.76348, "d4.loss_bbox": 1.17159, "d4.loss_iou": 1.49131, "loss_rpn_cls": 1.86993, "loss_rpn_bbox": 0.3745, "loss_cls0": 5.34581, "acc0": 93.80078, "loss_bbox0": 2.62767, "loss_mask0": 7.38635, "loss_cls1": 11.21703, "loss_bbox1": 12.52194, "loss_centerness1": 7.80324, "loss_cls_aux0": 0.98582, "loss_bbox_aux0": 1.18812, "loss_iou_aux0": 0.67543, "d0.loss_cls_aux0": 0.98298, "d0.loss_bbox_aux0": 1.19085, "d0.loss_iou_aux0": 0.67027, "d1.loss_cls_aux0": 0.98263, "d1.loss_bbox_aux0": 1.19106, "d1.loss_iou_aux0": 0.67095, "d2.loss_cls_aux0": 0.98763, "d2.loss_bbox_aux0": 1.19102, "d2.loss_iou_aux0": 0.67177, "d3.loss_cls_aux0": 0.98499, "d3.loss_bbox_aux0": 1.19076, "d3.loss_iou_aux0": 0.6727, "d4.loss_cls_aux0": 0.98517, "d4.loss_bbox_aux0": 1.19041, "d4.loss_iou_aux0": 0.67406, "loss_cls_aux1": 1.01599, "loss_bbox_aux1": 1.09422, "loss_iou_aux1": 1.13218, "d0.loss_cls_aux1": 0.99987, "d0.loss_bbox_aux1": 1.09502, "d0.loss_iou_aux1": 1.13296, "d1.loss_cls_aux1": 1.00546, "d1.loss_bbox_aux1": 1.0949, "d1.loss_iou_aux1": 1.13313, "d2.loss_cls_aux1": 1.00892, "d2.loss_bbox_aux1": 1.09485, "d2.loss_iou_aux1": 1.13308, "d3.loss_cls_aux1": 1.00891, "d3.loss_bbox_aux1": 1.0947, "d3.loss_iou_aux1": 1.13291, "d4.loss_cls_aux1": 1.00686, "d4.loss_bbox_aux1": 1.09433, "d4.loss_iou_aux1": 1.13266, "loss": 115.43992, "grad_norm": 99.32982, "time": 0.70779}
